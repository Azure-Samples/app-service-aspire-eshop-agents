@page "/"
@layout MainLayout
@using dotnetfashionassistant.Components.Layout;
@using Microsoft.Extensions.Configuration
@using Microsoft.Net.Http.Headers
@using System.Text
@using System.Text.Json
@using dotnetfashionassistant.Models
@rendermode InteractiveServer
@inject IHttpClientFactory HttpClientFactory
@inject IConfiguration configuration
@inject IJSRuntime JSRuntime
@inject dotnetfashionassistant.Services.MultiAgentOrchestrationService AgentService
@inject dotnetfashionassistant.Services.AgentModeService AgentModeService
@implements IDisposable

<div class="container">
    <div class="content">        
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="page-title mb-0">Fashion Store Assistant</h1>
            <button class="btn btn-outline-primary" @onclick="StartNewConversation">
                <i class="bi bi-plus-circle me-2"></i>New Conversation
            </button>
        </div>
        
        <!-- AI Agent Chat Interface -->
        <div class="chat-container">
            <div class="chat-messages" id="chatMessages">
                @if (chatHistory.Count == 0)
                {
                    <div class="chat-message agent-message">
                        <div class="message-content">
                            <p>Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?</p>
                        </div>
                    </div>
                }
                else
                {
                    @foreach (var msg in chatHistory)
                    {
                        <div class="chat-message @(msg.IsUser ? "user-message" : "agent-message")">
                            <div class="message-content">                                @if (msg.IsUser)
                                {
                                    <p>@msg.Content</p>
                                }
                                else
                                {
                                    <p>@((MarkupString)(!string.IsNullOrEmpty(msg.FormattedContent) ? msg.FormattedContent : msg.Content))</p>
                                }
                            </div>
                        </div>
                    }
                }

                @if (isLoading)
                {
                    <div class="chat-message agent-message">
                        <div class="message-content typing-indicator">
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                            <div class="typing-dot"></div>
                        </div>
                    </div>
                }
            </div>

            <div class="chat-input-container">
                <input type="text" 
                       class="chat-input" 
                       placeholder="Type your message here..." 
                       @bind="chatMessage" 
                       @bind:event="oninput" 
                       @onkeypress="HandleKeyPress" />
                <button class="chat-send-btn" @onclick="SendChatMessage" disabled="@(isLoading || string.IsNullOrWhiteSpace(chatMessage))">
                    <i class="bi bi-send-fill"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<style>
    /* Center and top align the container */
    .container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: flex-start;
        min-height: 100vh;
        padding: 20px;
        text-align: center;
    }

    /* Narrow the heading */
    .page-title {
        font-size: 1.5em;
        width: auto;
        text-align: left;
    }

    /* Content styling */
    .content {
        width: 100%;
        max-width: 600px;
        text-align: left;
    }

    /* Chat interface styling */
    .chat-container {
        display: flex;
        flex-direction: column;
        height: 60vh;
        width: 100%;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        overflow: hidden;
    }
    
    .chat-messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 15px;
        display: flex;
        flex-direction: column;
        gap: 10px;
        background-color: #f8f9fa;
    }
    
    .chat-message {
        display: flex;
        margin-bottom: 10px;
    }
    
    .user-message {
        justify-content: flex-end;
    }
    
    .agent-message {
        justify-content: flex-start;
    }
    
    .message-content {
        max-width: 70%;
        padding: 10px 15px;
        border-radius: 18px;
        word-wrap: break-word;
    }
    
    .user-message .message-content {
        background-color: #0d6efd;
        color: white;
        border-bottom-right-radius: 5px;
    }
    
    .agent-message .message-content {
        background-color: #e9ecef;
        color: #212529;
        border-bottom-left-radius: 5px;
    }
    
    .message-content p {
        margin: 0;
    }
    
    .chat-input-container {
        display: flex;
        padding: 15px;
        background-color: white;
        border-top: 1px solid #dee2e6;
    }
    
    .chat-input {
        flex-grow: 1;
        padding: 10px 15px;
        border: 1px solid #dee2e6;
        border-radius: 20px;
        outline: none;
        font-size: 1rem;
    }
    
    .chat-send-btn {
        width: 40px;
        height: 40px;
        border: none;
        background-color: #0d6efd;
        color: white;
        border-radius: 50%;
        margin-left: 10px;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    
    .chat-send-btn:disabled {
        background-color: #6c757d;
        cursor: not-allowed;
    }
    
    /* Typing indicator */
    .typing-indicator {
        display: flex;
        align-items: center;
        padding: 10px 15px;
    }
    
    .typing-dot {
        width: 8px;
        height: 8px;
        background-color: #6c757d;
        border-radius: 50%;
        margin: 0 2px;
        animation: typing-animation 1.4s infinite both;
    }
    
    .typing-dot:nth-child(2) {
        animation-delay: 0.2s;
    }    .typing-dot:nth-child(3) {
        animation-delay: 0.4s;
    }

    @@keyframes typing-animation {
        0% {
            opacity: 0.6;
            transform: scale(0.8);
        }
        50% {
            opacity: 1;
            transform: scale(1);
        }
        100% {
            opacity: 0.6;
            transform: scale(0.8);
        }
    }
    
    /* DEMO FEATURE: Styling for agents used display */
    .agents-used {
        margin-top: 8px;
        padding: 4px 8px;
        background-color: #f8f9fa;
        border-left: 3px solid #0d6efd;
        border-radius: 4px;
        font-size: 0.875rem;
    }
    
    .agents-used i {
        color: #0d6efd;
    }
</style>

@code {
    private bool isLoading;
    private string? chatMessage { get; set; }
    private List<ChatMessage> chatHistory = new List<ChatMessage>();
    private string? currentThreadId; // Store the agent thread ID for conversation continuity
    private bool isLoadingHistory = false;
    
    protected override async Task OnInitializedAsync()
    {
        // Subscribe to thread ID changes
        AgentModeService.ThreadIdChanged += OnThreadIdChanged;
        
        // Always try to get the current thread ID and load history
        currentThreadId = AgentModeService.CurrentThreadId;
        
        Console.WriteLine($"OnInitializedAsync - ThreadId: {currentThreadId ?? "null"}");
        
        if (!string.IsNullOrEmpty(currentThreadId))
        {
            // Clear any existing history first
            chatHistory.Clear();
            
            // Add a loading message
            chatHistory.Add(new ChatMessage
            {
                Content = "Loading conversation history...",
                IsUser = false,
                Timestamp = DateTime.Now
            });
            
            // Trigger UI update
            StateHasChanged();
            
            // Load history immediately
            await LoadChatHistoryAsync();
        }
        else
        {
            // No existing thread, start fresh
            chatHistory.Clear();
            chatHistory.Add(new ChatMessage
            {
                Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
                IsUser = false,
                Timestamp = DateTime.Now
            });
        }
        
        await base.OnInitializedAsync();
    }
    
    // Load chat history asynchronously to avoid blocking page navigation
    private async Task LoadChatHistoryAsync()
    {
        // If we have a thread ID and haven't started loading history yet
        if (!string.IsNullOrEmpty(currentThreadId) && !isLoadingHistory)
        {
            isLoadingHistory = true;
            
            try
            {
                Console.WriteLine($"Loading chat history for thread: {currentThreadId}");
                var history = await AgentService.GetThreadHistoryAsync(currentThreadId);
                Console.WriteLine($"Loaded {history.Count} messages from history");
                
                // Update the chat history on the UI thread
                await InvokeAsync(() => {
                    chatHistory.Clear();
                    
                    if (history.Count > 0)
                    {
                        // Add loaded history - we have actual conversation history
                        chatHistory.AddRange(history);
                        Console.WriteLine($"Chat history loaded successfully. Total messages in UI: {chatHistory.Count}");
                    }
                    else
                    {
                        // No messages in thread yet, but thread exists - this is a new conversation
                        Console.WriteLine("Thread exists but no messages yet - starting new conversation");
                        chatHistory.Add(new ChatMessage
                        {
                            Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
                            IsUser = false,
                            Timestamp = DateTime.Now
                        });
                    }
                    
                    StateHasChanged();
                });
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading chat history: {ex.Message}");
                // If there's an error loading history, show a friendly message
                await InvokeAsync(() => {
                    chatHistory.Clear();
                    chatHistory.Add(new ChatMessage
                    {
                        Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
                        IsUser = false,
                        Timestamp = DateTime.Now
                    });
                    StateHasChanged();
                });
            }
            finally
            {
                isLoadingHistory = false;
            }
        }
        else if (string.IsNullOrEmpty(currentThreadId))
        {
            // No thread ID - start fresh
            Console.WriteLine("No thread ID available - starting fresh conversation");
            await InvokeAsync(() => {
                chatHistory.Clear();
                chatHistory.Add(new ChatMessage
                {
                    Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
                    IsUser = false,
                    Timestamp = DateTime.Now
                });
                StateHasChanged();
            });
        }
    }
      // Start a new conversation by clearing the current thread ID and resetting the chat
    private async Task StartNewConversation()
    {
        // Clean up the previous conversation's orchestrator agent
        if (!string.IsNullOrEmpty(currentThreadId))
        {
            await AgentService.CleanupConversationAsync(currentThreadId);
        }
        
        // Clear the current thread ID
        currentThreadId = null;
        AgentModeService.CurrentThreadId = null;
        
        // Reset the chat history
        chatHistory.Clear();
        
        // Add a welcome message
        chatHistory.Add(new ChatMessage
        {
            Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
            IsUser = false,
            Timestamp = DateTime.Now
        });
        
        // Update the UI
        StateHasChanged();
        
        // Clear any cached data for the previous thread
        isLoadingHistory = false;
    }
      
    // Handle AI Agent chat functionality
    private async Task SendChatMessage()
    {
        if (string.IsNullOrWhiteSpace(chatMessage))
            return;
            
        // Add user message to chat history
        chatHistory.Add(new ChatMessage { 
            Content = chatMessage, 
            IsUser = true,
            Timestamp = DateTime.Now 
        });
        
        string userMessage = chatMessage;
        chatMessage = string.Empty; // Clear input field
        isLoading = true;
        StateHasChanged(); // Update UI to show user message
        
        try
        {
            // Create a thread if this is the first message
            if (string.IsNullOrEmpty(currentThreadId))
            {
                currentThreadId = await AgentService.CreateThreadAsync();
                AgentModeService.CurrentThreadId = currentThreadId;
            }
              // Send message to Azure AI Agent and get enhanced response with agent tracking
            var agentResponse = await AgentService.SendMessageWithAgentTrackingAsync(currentThreadId, userMessage);
            
            // Format the response for better HTML display
            string formattedResponse = FormatAgentResponse(agentResponse.Content);
            
            // Add AI response to chat history
            chatHistory.Add(new ChatMessage { 
                Content = agentResponse.Content,
                FormattedContent = formattedResponse,
                IsUser = false,
                Timestamp = DateTime.Now
            });
            
            // Check if the response mentions adding items to cart
            if (agentResponse.Content.Contains("added to your cart") || 
                agentResponse.Content.Contains("been added to your cart") || 
                agentResponse.Content.Contains("Added to cart") ||
                agentResponse.Content.Contains("item to your cart") ||
                agentResponse.Content.Contains("items to your cart"))
            {
                // Update the cart counter if items were added
                await UpdateCartCounterAsync();
            }
        }
        catch (Exception ex)
        {
            // Handle any errors during AI communication
            chatHistory.Add(new ChatMessage { 
                Content = $"Sorry, I encountered an error: {ex.Message}. Please try again later.", 
                IsUser = false,
                Timestamp = DateTime.Now 
            });
        }
        finally
        {
            isLoading = false;
            StateHasChanged(); // Update UI with AI response
            
            // Scroll to bottom of chat
            await ScrollToBottom();
        }
    }
    
    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(chatMessage) && !isLoading)
        {
            await SendChatMessage();
        }
    }    private string FormatAgentResponse(string response)
    {
        if (string.IsNullOrEmpty(response))
            return string.Empty;
            
        // Format the response for better HTML display
        
        // Handle markdown-style bold text (convert **text** to <strong>text</strong>)
        response = System.Text.RegularExpressions.Regex.Replace(
            response, 
            @"\*\*([^*]+)\*\*", 
            "<strong>$1</strong>");
            
        // Handle markdown-style headers (### Header)
        response = System.Text.RegularExpressions.Regex.Replace(
            response, 
            @"###\s+([^\r\n]+)", 
            "<h4>$1</h4>");
            
        // Handle numbered lists - only format when it's clearly a list (multiple items or at line start)
        // First check if this looks like an actual numbered list
        var hasMultipleNumbers = System.Text.RegularExpressions.Regex.Matches(response, @"(?:^|\n)\d+\.\s").Count > 1;
        if (hasMultipleNumbers)
        {
            response = System.Text.RegularExpressions.Regex.Replace(
                response, 
                @"(?:^|\n)(\d+\.)\s+([^\r\n]+)", 
                "<br><strong>$1</strong> $2",
                System.Text.RegularExpressions.RegexOptions.Multiline);
        }
            
        // Handle dash/hyphen lists - add line break before dash
        response = System.Text.RegularExpressions.Regex.Replace(
            response, 
            @"^(\s*-\s+)([^\r\n]+)", 
            "<br>$1$2",
            System.Text.RegularExpressions.RegexOptions.Multiline);
            
        // Normalize line endings and handle various newline combinations
        response = response
            .Replace("\r\n", "\n")  // Normalize Windows line endings
            .Replace("\r", "\n");   // Normalize old Mac line endings
            
        // Handle double newlines first (paragraphs)
        response = response.Replace("\n\n", "<br><br>");
        
        // Handle single newlines
        response = response.Replace("\n", "<br>");
        
        // Handle bullet points
        response = response.Replace("•", "<br>•");
        
        return response.Trim();
    }
    
    // Method to update the cart counter by fetching the current cart and updating the badge
    private async Task UpdateCartCounterAsync()
    {
        try
        {
            // Create a client for API calls
            var client = HttpClientFactory.CreateClient("LocalApi");
            
            // Get the current cart data
            var cartSummary = await client.GetFromJsonAsync<CartSummary>("api/Cart");
            
            if (cartSummary != null)
            {
                // Cart update completed successfully
                Console.WriteLine("Cart updated successfully");
            }
        }
        catch (Exception ex)
        {
            // Silently handle errors - we don't want to disturb the chat experience if cart update fails
            Console.WriteLine($"Error updating cart: {ex.Message}");
        }
    }
    
    private async Task ScrollToBottom()
    {
        try
        {
            // Use JSRuntime to scroll to the bottom of the chat
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chatMessages");
        }
        catch
        {
            // Silently fail if JS interop fails
        }
    }
      
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine($"OnAfterRenderAsync (firstRender) - ThreadId: {currentThreadId ?? "null"}, ChatHistory Count: {chatHistory.Count}");
            
            // Register JS function for scrolling
            await JSRuntime.InvokeVoidAsync("eval", @"
                window.scrollToBottom = function(elementId) {
                    var element = document.getElementById(elementId);
                    if (element) {
                        element.scrollTop = element.scrollHeight;
                    }
                }
            ");
            
            // Check if we need to reload the thread ID from the service
            var serviceThreadId = AgentModeService.CurrentThreadId;
            if (!string.IsNullOrEmpty(serviceThreadId) && currentThreadId != serviceThreadId)
            {
                Console.WriteLine($"Thread ID mismatch detected. Service: {serviceThreadId}, Local: {currentThreadId ?? "null"}. Updating...");
                currentThreadId = serviceThreadId;
                await LoadChatHistoryAsync();
            }
            
            // Only trigger fallback loading if we truly have a loading message still showing
            if (!isLoadingHistory && !string.IsNullOrEmpty(currentThreadId) && 
                chatHistory.Count == 1 && 
                chatHistory[0].Content == "Loading conversation history...")
            {
                Console.WriteLine("Fallback history loading triggered in OnAfterRenderAsync - still showing loading message");
                await LoadChatHistoryAsync();
            }
        }
        
        // Scroll to bottom whenever component rerenders
        await ScrollToBottom();
    }

    public static readonly List<Product> products = new List<Product>()
    {
        new Product { Id = 3, Name = "Navy Single-Breasted Slim Fit Formal Blazer", Description = "This navy single-breasted slim fit formal blazer is made from a blend of polyester and viscose. It features a notched lapel, a chest welt pocket, two flap pockets, a front button fastening, long sleeves, button cuffs, a double vent to the rear, and a full lining." },
        new Product { Id = 111, Name = "White & Navy Blue Slim Fit Printed Casual Shirt", Description = "White and navy blue printed casual shirt, has a spread collar, short sleeves, button placket, curved hem, one patch pocket" },
        new Product { Id = 116, Name = "Red Slim Fit Checked Casual Shirt", Description = "Red checked casual shirt, has a spread collar, long sleeves, button placket, curved hem, one patch pocket" },
        new Product { Id = 10, Name = "Navy Blue Washed Denim Jacket", Description = "Navy Blue washed denim jacket, has a spread collar, 4 pockets, button closure, long sleeves, straight hem, and unlined" }
    };    
    
    public class Product
    {
        public int Id { get; set; }
        public required string Name { get; set; }
        public required string Description { get; set; }

        public Product GetProduct(int Id) => products.Find(products => products.Id == Id) ?? throw new InvalidOperationException("Product not found");
    }
    
    // Event handler for thread ID changes
    private async void OnThreadIdChanged(string? newThreadId)
    {
        Console.WriteLine($"OnThreadIdChanged: {newThreadId ?? "null"} (current: {currentThreadId ?? "null"})");
        
        // Only update if the thread ID actually changed
        if (currentThreadId != newThreadId)
        {
            Console.WriteLine($"Thread ID actually changed from '{currentThreadId ?? "null"}' to '{newThreadId ?? "null"}'");
            currentThreadId = newThreadId;
            
            await InvokeAsync(async () =>
            {
                if (!string.IsNullOrEmpty(currentThreadId))
                {
                    // Clear current history and load new thread history
                    Console.WriteLine("Clearing history and loading new thread");
                    chatHistory.Clear();
                    chatHistory.Add(new ChatMessage
                    {
                        Content = "Loading conversation history...",
                        IsUser = false,
                        Timestamp = DateTime.Now
                    });
                    StateHasChanged();
                    
                    await LoadChatHistoryAsync();
                }
                else
                {
                    // No thread, start fresh
                    Console.WriteLine("No thread ID - starting fresh");
                    chatHistory.Clear();
                    chatHistory.Add(new ChatMessage
                    {
                        Content = "Hello! I'm your AI shopping assistant. How can I help you with your fashion needs today?",
                        IsUser = false,
                        Timestamp = DateTime.Now
                    });
                    StateHasChanged();
                }
            });
        }
        else
        {
            Console.WriteLine("Thread ID unchanged - no action needed");
        }
    }
    
    // Clean up event subscription
    public void Dispose()
    {
        AgentModeService.ThreadIdChanged -= OnThreadIdChanged;
    }
}
